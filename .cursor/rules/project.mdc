---
description: 
globs: 
alwaysApply: true
---
# Vibe Coding Project Rules

## Core Development Principles

### 1. Test-Driven Development (TDD)
- **테스트 코드를 먼저 만드세요**
- Write tests before implementing functionality
- Follow the Red-Green-Refactor cycle:
  1. Red: Write a failing test
  2. Green: Write minimal code to pass the test
  3. Refactor: Improve code while keeping tests passing

### 2. Test Quality Priority
- **테스트 코드를 통과하는 것이 가장 중요합니다**
- All tests must pass before considering implementation complete
- Maintain high test coverage (aim for >90%)
- Write meaningful test descriptions in Korean
- Include edge cases and error scenarios in tests

### 3. Documentation Standards
- **README.md를 만들 때 첫 소개로 무조건 바이브 코딩으로 만들었다는 내용으로 시작하세요**
- Every README.md must begin with: "이 프로젝트는 바이브 코딩으로 제작되었습니다."
- Include comprehensive project setup instructions
- Document all major features and usage examples
- Maintain Korean language documentation for Korean speakers

### 4. Language and Framework Standards
- **TypeScript를 사용하세요**
- Use TypeScript for all new projects and features
- Maintain strict type checking
- Define proper interfaces and types
- Use modern TypeScript features and best practices

### 5. Build Tool Standards
- **React 앱을 구현할 경우 create-react-app 대신 Vite를 사용하세요**
- Use Vite for all new React projects instead of create-react-app
- Configure Vite with TypeScript support
- Leverage Vite's fast development server and hot module replacement
- Use Vite plugins for enhanced development experience

## Code Quality Guidelines

### TypeScript Best Practices
- Enable strict mode in tsconfig.json
- Use proper type annotations
- Avoid `any` type unless absolutely necessary
- Implement proper error handling with typed errors
- Use union types and type guards appropriately

### Vite Configuration Standards
- Use `npm create vite@latest project-name -- --template react-ts` for new React projects
- Configure vite.config.ts with proper base settings
- Use environment variables with proper typing
- Configure path aliases for clean imports
- Set up proper build optimization settings

### Testing Standards
- Use Vitest (Vite's native test runner) for unit testing
- Use React Testing Library for React component testing
- Configure @testing-library/jest-dom for extended matchers
- Write descriptive test names in Korean
- Group related tests using `describe` blocks
- Mock external dependencies appropriately
- Test both success and failure scenarios
- **테스트 실행 시 watch 모드를 사용하지 마세요 - 일반 실행 모드를 사용하세요**
- Use `npm run test` or `vitest run` for single test runs
- Avoid watch mode unless specifically needed for development
- Always run tests in CI/CD with `--run` flag to prevent hanging

### File Structure
- Organize files by feature, not by file type
- Keep related test files next to source files
- Use consistent naming conventions
- Maintain clean import/export statements
- Use absolute imports with path aliases

### Git Commit Standards
- Write clear, descriptive commit messages in Korean
- Use conventional commit format when appropriate
- Keep commits focused and atomic
- Include test updates in the same commit as implementation

## Project-Specific Rules

### React Projects with Vite
- Use functional components with hooks
- Implement proper prop types with TypeScript interfaces
- Use React Testing Library with Vitest for component testing
- Follow React best practices for state management
- Configure Vite for optimal development and production builds
- Use Vite's built-in CSS processing and hot reload features

### Node.js Projects
- Use ES modules when possible
- Implement proper error handling middleware
- Write integration tests for API endpoints
- Use environment variables for configuration

### CSS/Styling
- Use modern CSS features (Grid, Flexbox)
- Implement responsive design from the start
- Use CSS-in-JS or CSS modules for component styling
- Maintain consistent design tokens
- Leverage Vite's CSS preprocessing capabilities

## Automation and CI/CD

### Development Workflow
- Run tests in single execution mode using `vitest run` instead of watch mode
- Use pre-commit hooks for code quality checks
- Implement automated testing in CI/CD pipeline
- Ensure all tests pass before merging to main branch
- **테스트 검증 시에는 항상 단일 실행 모드를 사용하세요**

### Code Quality Tools
- Use ESLint with TypeScript support
- Configure Prettier for consistent formatting
- Use Husky for git hooks
- Implement automated dependency updates
- Configure Vite's built-in linting integration

### Vite-Specific Best Practices
- Use Vite's development server for local development
- Configure proper preview settings for production testing
- Leverage Vite's tree-shaking capabilities
- Use dynamic imports for code splitting
- Configure proper asset handling and optimization

## Package.json Scripts
For Vite projects, use these standard scripts:
```json
{
  "scripts": {
    "dev": "vite",
    "build": "tsc && vite build",
    "preview": "vite preview",
    "test": "vitest run",
    "test:watch": "vitest",
    "test:ui": "vitest --ui",
    "test:coverage": "vitest --coverage"
  }
}
```

**중요**: 기본 `test` 스크립트는 항상 단일 실행 모드(`vitest run`)를 사용하며, watch 모드가 필요한 경우에만 `test:watch`를 사용하세요.

Remember: These rules exist to ensure consistent, high-quality code that is well-tested and maintainable. Always prioritize test coverage and code quality over speed of delivery. Use Vite for modern, fast development experience with React applications. 